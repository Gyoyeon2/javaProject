package project1;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorUI extends JFrame implements ActionListener {
    private JLabel displayLabel;
    private double currentResult;
    private String currentOperator;
    private boolean newNumberEntered;
    private boolean decimalEntered;

    public CalculatorUI() {
        setTitle("20121197 김교연 자바 과제 제출");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(null);

        displayLabel = new JLabel();
        displayLabel.setHorizontalAlignment(JLabel.RIGHT);
        displayLabel.setBounds(10, 10, 400, 50);
        displayLabel.setOpaque(true);
        displayLabel.setBackground(Color.WHITE);
        displayLabel.setFont(new Font("Arial", Font.PLAIN, 20));
        mainPanel.add(displayLabel);

        JButton[] numberButtons = new JButton[10];
        for (int i = 0; i < numberButtons.length; i++) {
            numberButtons[i] = new JButton(Integer.toString(i));
            numberButtons[i].addActionListener(this);
            numberButtons[i].setBounds(10 + (i % 3) * 100, 70 + (3 - i / 3) * 100, 100, 100);
            numberButtons[i].setBackground(Color.BLACK);
            numberButtons[i].setForeground(Color.WHITE);
            numberButtons[i].setFont(new Font("Arial", Font.PLAIN, 20));
            mainPanel.add(numberButtons[i]);
        }

        String[] operatorSymbols = {"+", "-", "*", "/", "=", ".", "C", "Del"};
        JButton[] operatorButtons = new JButton[operatorSymbols.length];
        for (int i = 0; i < operatorButtons.length; i++) {
            operatorButtons[i] = new JButton(operatorSymbols[i]);
            operatorButtons[i].addActionListener(this);
            operatorButtons[i].setBounds(310 + (i / 4) * 100, 70 + (i % 4) * 100, 100, 100);
            operatorButtons[i].setBackground(Color.BLACK);
            operatorButtons[i].setForeground(Color.WHITE);
            operatorButtons[i].setFont(new Font("Arial", Font.PLAIN, 20));
            mainPanel.add(operatorButtons[i]);
        }

        JButton clearAllButton = new JButton("Clear All");
        clearAllButton.addActionListener(this);
        clearAllButton.setBounds(10, 470, 400, 50);
        clearAllButton.setBackground(Color.BLACK);
        clearAllButton.setForeground(Color.WHITE);
        clearAllButton.setFont(new Font("Arial", Font.PLAIN, 20));
        mainPanel.add(clearAllButton);

        mainPanel.setPreferredSize(new Dimension(530, 570));
        add(mainPanel);
        pack();
    }
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();

        if (command.matches("\\d")) {
            processNumber(command);
        } else if (command.equals("=")) {
            processEquals();
        } else if (command.equals("C")) {
            processClear();
        } else if (command.equals("Del")) {
            processDelete();
        } else if (command.equals(".")) {
            processDecimal();
        } else if (command.matches("[+\\-*/]")) {
            processOperator(command);
        }
    }
    
    
    private void processNumber(String number) {
        if (newNumberEntered) {
            displayLabel.setText(number);
            newNumberEntered = false;
        } else {
            displayLabel.setText(displayLabel.getText() + number);
        }
    }

    private void processOperator(String operator) {
        String currentText = displayLabel.getText();
        if (currentOperator == null) {
            currentResult = Double.parseDouble(currentText);
        } else {
            double number = Double.parseDouble(currentText);
            currentResult = performOperation(currentResult, number, currentOperator);
        }
        displayLabel.setText(Double.toString(currentResult));
        currentOperator = operator;
        newNumberEntered = true;
        decimalEntered = false;
    }

    private void processEquals() {
    	if (currentOperator != null) {
            double number = Double.parseDouble(displayLabel.getText());
            currentResult = performOperation(currentResult, number, currentOperator);
            displayLabel.setText(Double.toString(currentResult));
            currentOperator = null;
            newNumberEntered = true;
            decimalEntered = false;
        }
    }

    private void processClear() {
        displayLabel.setText("");
        currentResult = 0;
        currentOperator = null;
        newNumberEntered = false;
        decimalEntered = false;
    }
    private void processDelete() {
        String currentText = displayLabel.getText();
        if (!currentText.isEmpty()) {
            displayLabel.setText(currentText.substring(0, currentText.length() - 1));
        }
    }

    private void processDecimal() {
        if (!decimalEntered) {
            displayLabel.setText(displayLabel.getText() + ".");
            decimalEntered = true;
        }
    }

    private double performOperation(double operand1, double operand2, String operator) {
        switch (operator) {
            case "+":
            	 return operand1 + operand2;
            case "-":
                return operand1 - operand2;
            case "*":
                return operand1 * operand2;
            case "/":
                return operand1 / operand2;
            default:
                throw new IllegalArgumentException("Invalid operator");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new CalculatorUI().setVisible(true);
            }
        });
    }
}
